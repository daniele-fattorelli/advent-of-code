
const input = [ [4,[3,[9,[9,0]]]], [[[7,6],[2,[2,5]]],[5,[[7,3],8]]], [4,[4,6]], [[0,[5,6]],[[[1,3],[2,7]],[[0,6],4]]], [6,[[3,[6,0]],3]], [[7,[9,[8,5]]],[6,7]], [[[[2,6],1],2],[3,[8,4]]], [4,[[[5,4],[2,7]],[[8,0],[2,3]]]], [[[[4,3],2],[[3,6],[2,5]]],[[[3,7],8],0]], [[[8,[0,7]],1],[[9,[3,9]],9]], [[[[3,0],[1,3]],[[0,9],8]],[[[7,2],9],[[1,4],[3,5]]]], [[[[9,6],[4,4]],[1,3]],[[4,3],[[6,4],[8,4]]]], [[[1,2],[[7,6],[2,3]]],[[4,6],[4,2]]], [[[4,8],[[5,8],1]],[2,3]], [[[5,2],[3,[5,7]]],[[2,9],5]], [[[6,[3,2]],[2,6]],[[8,[4,2]],[[5,2],7]]], [[[[2,6],[0,1]],[7,[3,6]]],[[1,6],[[7,9],0]]], [[[0,3],[8,1]],[[[9,0],3],[0,2]]], [[8,[[7,1],[4,7]]],[[0,[1,3]],[8,2]]], [[[[2,3],4],[[0,8],[9,0]]],[1,[[5,3],4]]], [[[[7,2],2],[[1,3],[8,3]]],[4,[[7,9],[0,6]]]], [[[[2,2],[3,4]],[[1,5],[4,3]]],[6,[[7,2],1]]], [1,[[[5,7],0],[9,[8,8]]]], [[[[9,2],[0,9]],[4,[7,8]]],[[4,8],[[1,8],[4,9]]]], [[[[4,7],2],2],4], [1,[[2,[4,2]],1]], [[[[7,2],[3,8]],[0,[1,3]]],[[[4,4],[2,4]],[8,2]]], [[[[1,0],[0,5]],2],[[9,[5,0]],[[1,6],5]]], [4,[[[8,1],[1,4]],[7,[1,3]]]], [[[6,[0,4]],[[4,6],[2,4]]],[9,[1,5]]], [[[[3,6],[3,3]],1],[0,[[8,8],2]]], [[7,[5,[2,6]]],[[[7,9],6],[0,[3,6]]]], [[[[6,7],4],[[2,9],2]],3], [[[7,[1,7]],[5,4]],[[[1,1],[0,1]],5]], [[6,[[1,0],6]],[0,[6,[0,5]]]], [[[[2,4],[4,6]],9],[4,[[8,0],7]]], [[[[9,9],[5,7]],[9,[8,6]]],[[3,[2,3]],0]], [[0,[1,[5,3]]],[3,[8,[3,4]]]], [[[[4,3],8],[2,9]],[[1,[6,5]],[[5,7],2]]], [[[0,[7,4]],[9,[9,6]]],[[8,[5,5]],[[6,4],1]]], [[[[7,3],[7,9]],[8,[6,2]]],[[8,[4,5]],[[6,4],[6,7]]]], [[7,[[9,0],[9,0]]],[[[0,8],2],[8,[8,3]]]], [4,[7,[5,6]]], [7,[[[3,8],8],3]], [[[4,[6,6]],0],[9,0]], [[[[7,4],8],8],[[0,1],[[0,0],[2,4]]]], [7,[1,[[9,4],[3,6]]]], [[[[2,8],9],[[8,6],[2,2]]],[[[5,1],9],[2,[0,7]]]], [8,7], [[[[0,8],4],[[9,9],[9,9]]],[[[4,3],[1,0]],[6,8]]], [[[[8,3],[8,9]],1],[[4,[1,0]],[[4,0],[2,3]]]], [[[[4,7],[1,3]],[6,9]],[[1,0],[[1,8],5]]], [[2,[4,[6,5]]],[3,[[9,9],5]]], [[[[7,6],4],9],[8,[4,5]]], [[[0,[6,6]],[7,[8,9]]],[[[0,0],[3,4]],[4,[1,8]]]], [[[9,[7,0]],[5,8]],[6,[[5,0],[0,6]]]], [[[[4,0],[1,9]],[7,[3,6]]],[[2,[8,6]],[[2,8],[8,2]]]], [[[9,6],8],[[[5,5],[4,8]],0]], [[[[1,7],1],2],[[[6,8],3],[[3,3],5]]], [3,[5,[[3,8],6]]], [3,[[[9,6],[5,8]],[9,2]]], [[6,1],[6,4]], [[2,6],[[[1,2],2],8]], [[[[1,7],[3,6]],[2,[0,2]]],[[3,0],9]], [1,[[0,[4,9]],5]], [[[[5,5],[5,2]],[0,[6,4]]],8], [0,[7,[[6,9],[6,0]]]], [[[[2,2],[4,7]],[[7,4],6]],[[0,[1,7]],[[3,2],6]]], [[9,8],0], [[[[5,4],[4,8]],2],[3,[8,9]]], [[[[7,0],8],5],[2,6]], [[[5,[0,8]],5],[[[5,0],[1,8]],[[0,2],7]]], [[[[9,4],8],[[6,5],4]],[[5,[8,9]],[4,[0,4]]]], [[[[3,6],7],[[9,3],7]],[7,[[8,3],9]]], [[[[0,7],5],[[5,7],2]],[[2,[9,5]],[[7,7],[5,0]]]], [[[[7,5],2],[8,6]],[[2,[6,2]],[5,[3,1]]]], [[9,[9,1]],6], [[[0,7],[[5,9],2]],3], [[[9,3],[8,8]],[0,[4,5]]], [[[[6,2],5],[4,[3,1]]],[9,[2,8]]], [[[1,[9,4]],[[0,0],2]],[[1,[2,1]],[[7,8],[3,2]]]], [[[[0,6],[8,9]],[[4,7],[5,6]]],[[[1,4],[8,7]],[4,6]]], [[[[6,4],[1,5]],[0,8]],[[[9,7],[1,2]],[9,4]]], [[[[4,5],[0,7]],[9,[1,8]]],[[[5,0],6],7]], [[[0,[6,9]],[5,[5,6]]],7], [[4,5],[[7,[6,5]],1]], [[[7,9],[6,7]],[4,1]], [[[[9,6],1],[[3,1],[9,7]]],[1,[7,1]]], [[[0,[2,0]],5],[[8,[7,6]],[[7,3],4]]], [[[6,[1,7]],[9,[2,7]]],3], [[[6,[8,2]],5],[4,[[1,3],[5,1]]]], [[[4,[3,3]],[4,[2,4]]],[5,4]], [[[1,6],[4,[4,0]]],[[8,[2,2]],[[8,1],[4,7]]]], [[2,0],[[2,1],[[4,8],[2,7]]]], [9,[[8,4],0]], [[1,6],[[5,[1,3]],[9,[0,9]]]], [[[0,[3,5]],3],[[2,[8,0]],[[2,0],[4,3]]]], [[[1,[1,9]],[9,[7,9]]],[[2,2],[[6,7],[0,7]]]], [[[4,6],[[6,2],[0,9]]],[[1,0],[1,[6,7]]]], [9,[[[0,1],4],[[9,3],3]]] ];
//const input = [ [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]], [7,[[[3,7],[4,3]],[[6,3],[8,8]]]], [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]], [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]], [7,[5,[[3,8],[1,4]]]], [[2,[2,2]],[8,[8,1]]], [2,9], [1,[[[9,3],9],[[9,0],[0,7]]]], [[[5,[7,4]],7],1], [[[[4,2],2],6],[8,7]] ];
//const input = [ [[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]], [[[5,[2,8]],4],[5,[[9,9],0]]], [6,[[[6,2],[5,6]],[[7,6],[4,7]]]], [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]], [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]], [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]], [[[[5,4],[7,7]],8],[[8,3],8]], [[9,3],[[9,9],[6,[4,9]]]], [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]], [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]] ];
//const input = [ [[[[4,3],4],4],[7,[[8,4],9]]], [1,1] ];

console.log(input);

var Sum = input[0];
var Result = 0;

function Explore(Numbers, Number, Level) {

    if (Array.isArray(Number[0])) {
        Explore(Numbers, Number[0], Level + 1);
    } else {
        Numbers.push({ "Number": Number[0], "Level": Level });
    }
    if (Array.isArray(Number[1])) {
        Explore(Numbers, Number[1], Level + 1);
    } else {
        Numbers.push({ "Number": Number[1], "Level": Level });
    }

}

function Minify(Numbers, Number, Level, index) {

    while (Number.length < 2) {
        if (Level < Numbers[index].Level) {
            Number.push([]);
            index = Minify(Numbers, Number[Number.length-1], Level+1, index);
        } else {
            Number.push(Numbers[index].Number);
            index++;
        }
    }

    return index;

}

function Reduce(Number) {

    let Numbers = [];
    Explore(Numbers, Number, 1);

    let Reduced = true;
    while (Reduced) {

        Reduced = false;

        let i = 0;
        while (!Reduced && i < Numbers.length) {
            if (Numbers[i].Level > 4) {

                if (i > 0) Numbers[i-1].Number += Numbers[i].Number;
                if (i < Numbers.length - 2) Numbers[i+2].Number += Numbers[i+1].Number;

                Numbers[i].Number = 0;
                Numbers[i].Level--;
                Numbers.splice(i+1, 1);            
                i--;

                Reduced = true;

            }
            i++;
        }
        i = 0;
        while (!Reduced && i < Numbers.length) {
            if (Numbers[i].Number > 9) {

                Numbers[i].Level++;
                Numbers.splice(i+1, 0, { "Number": Math.ceil(Numbers[i].Number / 2), "Level": Numbers[i].Level } );
                Numbers[i].Number = Math.floor(Numbers[i].Number / 2);
                i++;

                Reduced = true;

            }
            i++;
        }

    }

    Number.length = 0;
    Minify(Numbers, Number, 1, 0);

}

function Magnitude(Number) {

    return    3 * (Array.isArray(Number[0]) ? Magnitude(Number[0]) : Number[0])
            + 2 * (Array.isArray(Number[1]) ? Magnitude(Number[1]) : Number[1]);

}

console.log(JSON.stringify(Sum));
for (let k = 1; k < input.length; k++) {

    Sum = [ Sum, input[k] ];
    console.log(JSON.stringify(Sum));
    
    Reduce(Sum);
    console.log(JSON.stringify(Sum));

}

Result = Magnitude(Sum);

console.log('Part 1 answer: ' + Result);

var Couples = [];

for (let i = 0; i < input.length; i++) {
    for (let j = 0; j < input.length; j++) {
        if (i != j) {
            let Sum = [ input[i], input[j] ];
            Reduce(Sum);
            Couples.push({ "A": i, "B": j, "Sum": JSON.stringify(Sum), "Magnitude": Magnitude(Sum) });
        }
    }    
}

Couples.sort((A, B) => B.Magnitude - A.Magnitude);
console.log(Couples);

Result = Couples[0].Magnitude;

console.log('Part 2 answer: ' + Result);
